============================
 EKS cluster using AWS CLI
===========================
Creating Network:
-----------------

1. aws ec2 create-vpc --cidr-block 10.0.0.0/16 --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value=my-eks-task-vpc}]'

2. aws ec2 create-subnet --vpc-id vpc-0c980fb7725209547 --cidr-block 10.0.1.0/24 --availability-zone us-east-1a --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=my-eks-task-public-subnet-1a}]'

3. aws ec2 create-subnet --vpc-id vpc-0c980fb7725209547 --cidr-block 10.0.2.0/24 --availability-zone us-east-1b --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=my-eks-task-public-subnet-1b}]'

4 .aws ec2 create-internet-gateway --tag-specifications 'ResourceType=internet-gateway,Tags=[{Key=Name,Value=my-eks-task-igw}]'

5. aws ec2 attach-internet-gateway --vpc-id vpc-0c980fb7725209547 --internet-gateway-id igw-05db2e9440605ed4e

6. aws ec2 create-route-table --vpc-id vpc-0c980fb7725209547 --tag-specifications 'ResourceType=route-table,Tags=[{Key=Name,Value=my-eks-task-public-rt}]'

Creating a route to the Internet Gateway:
aws ec2 create-route --route-table-id rtb-083fe1e1923378996 --destination-cidr-block 0.0.0.0/0 --gateway-id igw-05db2e9440605ed4e

Associating the route table with the public subnets:
aws ec2 associate-route-table --subnet-id subnet-052448c72117cab22 --route-table-id rtb-083fe1e1923378996
aws ec2 associate-route-table --subnet-id subnet-06bac9bd7396d484e --route-table-id rtb-083fe1e1923378996

Enabling Auto-Assign Public IP on Public Subnets
Enable auto-assign public IP for both public subnets:
aws ec2 modify-subnet-attribute --subnet-id subnet-052448c72117cab22 --map-public-ip-on-launch
aws ec2 modify-subnet-attribute --subnet-id subnet-06bac9bd7396d484e --map-public-ip-on-launch


Creating a security group for your VPC with the name my-eks-task-sg:
aws ec2 create-security-group --group-name my-eks-task-sg --description "Security group for EKS" --vpc-id vpc-0c980fb7725209547

Add inbound rules to the security group:
aws ec2 authorize-security-group-ingress --group-id sg-0b5fb26de8dd9344d --protocol tcp --port 80 --cidr 0.0.0.0/0


Creating  IAM Roles and Policies
Creating  trust policy for the EKS cluster role:

vi eks-cluster-role-trust-policy.json 
---------------------------------------
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
--------------------------------------------
Creating the IAM role and attach the necessary policies:
aws iam create-role --role-name my-eks-task-cluster-role --assume-role-policy-document file://eks-cluster-role-trust-policy.json
aws iam attach-role-policy --role-name my-eks-task-cluster-role --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
aws iam attach-role-policy --role-name my-eks-task-cluster-role --policy-arn arn:aws:iam::aws:policy/AmazonEKSServicePolicy


Creating EKS Cluster
aws eks create-cluster --name my-eks-task-cluster --role-arn arn:aws:iam::838365449755:role/my-eks-task-cluster-role --resources-vpc-config subnetIds=subnet-052448c72117cab22,subnet-06bac9bd7396d484e,securityGroupIds=sg-0b5fb26de8dd9344d


Creating IAM Role for Node Groups

Creating trust policy for the node group role:

vi eks-nodegroup-role-trust-policy.json 
--------------------------------------
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
-------------------------------------------
Creating the IAM role and attach the necessary policies:

aws iam create-role --role-name my-eks-task-node-role --assume-role-policy-document file://eks-nodegroup-role-trust-policy.json
aws iam attach-role-policy --role-name my-eks-task-node-role --policy-arn arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
aws iam attach-role-policy --role-name my-eks-task-node-role --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
aws iam attach-role-policy --role-name my-eks-task-node-role --policy-arn arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy


 Creating Node Group
aws eks create-nodegroup --cluster-name my-eks-task-cluster --nodegroup-name my-eks-task-nodegroup --node-role arn:aws:iam::838365449755:role/my-eks-task-node-role --subnets subnet-052448c72117cab22 subnet-06bac9bd7396d484e --scaling-config minSize=1,maxSize=3,desiredSize=2 --disk-size 20 --instance-types t3.medium


-----------------------------------------------------------------------------
#!/bin/bash

# Download the latest release of kubectl
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

# Make the kubectl binary executable
chmod +x ./kubectl

# Move the binary to your PATH
sudo mv ./kubectl /usr/local/bin/kubectl

# Verify the installation
kubectl version --client

echo "kubectl installation completed successfully!"
-----------------------------------------------------------------
> aws eks update-kubeconfig --region us-east-1 --name my-eks-task-cluster

to see --->  cat ~/.kube/config
------------------------------------------------------------------
AWS CLI Command: This command is executed using the AWS Command Line Interface (CLI).

Parameters: 
--region us-east-1: Specifies the AWS region where your EKS cluster is located.
--name my-eks-task-cluster: Specifies the name of your EKS cluster.

Updating Kubeconfig:
The command retrieves the necessary cluster information from AWS and updates your local kubeconfig file,
which is typically located at ~/.kube/config.It adds a new context to the kubeconfig file that includes the 
cluster's API server endpoint, certificate authority data, and authentication information.

Authentication:
The command configures the kubeconfig file to use the AWS IAM authenticator for Kubernetes. This allows you to authenticate to the EKS cluster using your AWS IAM credentials.
Connecting to the Cluster:

Once the kubeconfig file is updated, we can use kubectl commands to interact with your EKS cluster.
-----------------------------------------------------

git clone https://github.com/geeekfa/Api-Flask.git

cd Api-Flask

aws ecr create-repository --repository-name my-flask-app --region us-east-1

aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 838365449755.dkr.ecr.us-east-1.amazonaws.com

docker build -t my-flask-app .

docker tag my-flask-app:latest 838365449755.dkr.ecr.us-east-1.amazonaws.com/my-flask-app:latest

---------------------------------------------------------
vi deployment.yml
----------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      initContainers:
      - name: init-myservice
        image: busybox
        command: ['sh', '-c', 'echo Initializing...; sleep 5;']
      containers:
      - name: flask-app
        image: 838365449755.dkr.ecr.us-east-1.amazonaws.com/my-flask-app:latest
        ports:
        - containerPort: 5000
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 10

kubectl apply -f .
-----------------------------------
vi service.yml
--------------
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: LoadBalancer
----------------------------------------

vi ingress.yml
--------------
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
spec:
  rules:
  - host: example.com
    http:
      paths:
      - path: /swagger-config
        pathType: Prefix
        backend:
          service:
            name: flask-app-service
            port:
              number: 80
      - path: /books
        pathType: Prefix
        backend:
          service:
            name: flask-app-service
            port:
              number: 80
-----------------------------
install ingress:
-----------
$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml  -- install ingress controller
$ kubectl apply -f nginx-ingress.yaml
$ kubectl get ing -n ingress-nginx
$ kubectl get pods -A

kubectl get svc 
---------------
external ip of svc shd map ingress hostname in sudo vi /etc/hosts   ho

then  curl http://example.com/books 

--------------------------
aws eks delete-nodegroup --cluster-name my-eks-task-cluster --nodegroup-name my-eks-task-nodegroup --region us-east-1
aws eks delete-cluster --name my-eks-task-cluster --region us-east-1


